{% extends 'xbase.html.twig' %}

{% block title %}Objective Questions{% endblock %}

{% block stylesheets %}
   <link rel="stylesheet" href="{{ asset('css/student.css') }}">
{% endblock %}

{% block content %}

<div class="full container-fluid">
    

 <div class="row">
            <!-- Left Side: Student Profile -->
            <div class="col-sm-9 col-md-9">


<div class="button-container">
    <a  class="btn btn-primary btm"> <span class="glyphicon glyphicon-file"></span> Objective</a>
    <a  class="btn btn-default btm"> <span class="glyphicon glyphicon-file"></span> Theory</a>
    <a  class="btn btn-default btm"> <span class="glyphicon glyphicon-file"></span> Result</a>
</div>

   
    <noscript>
        <div class="noscript-overlay">
          <h1> ⚠️ </h1> 
          <h4>Scripts are required for this exam. Please enable JavaScript to continue.</h4>
        </div>
    </noscript>


    <!-- Fullscreen Warning -->
    <div id="fullscreenWarning">
        <h2>Please Enter Full screen to Proceed with the Exam</h2>
        <p>Exams are only allowed on Full Screen Mode to avoid distractions</p>
        <button id="fullscreenButton">Go To Full-screen</button>
    </div>



<div class="exam-details" style="text-align:center;">
    <h4 class="title"><strong>{{ exam.subject.course }} , {{ exam.duration|date('H:i') }} minutes</strong></h4>

   <div id="countdown-timer">
    <h2 id="time-remaining" class="timecount">Loading...</h2>
   </div>

    <p>Instruction: No available instructions.</p>
</div>





<div id="question-container" class="question-containeq">
    <div id="question-text" class="question-text">Loading question...</div>
</div>

<div id="options-container" class="options-container">
    <!-- Options will be dynamically populated here -->
</div>

<div id="student-response" class="response-container">
    <!-- Student's response will be displayed here -->
</div>




<!-- Error message area -->
<div id="error-message" style="display: none;"></div>



<!-- Pagination controls (Previous, Page count, Next) -->
<div class="pagination-container" style="overflow-x:hidden;">
  <div class="page-numbers-wrapper">
    <div class="page-numbers">
      <!-- Page numbers dynamically generated here -->
    </div>
  </div>
  <div class="pagination-controls">
    <button id="prev-button" class="btn btn-primary">&lt;</button>
    <span id="page-info"> Page 1 of 20</span>
    <button id="next-button" class="btn btn-primary">&gt;</button>
     <button id="submit-button" class="btn btn-sm btn-danger" style="display: none; margin-left :5px; ">Submit</button>
  </div>
</div>


</div>


<!-- Right Side: Exam Content -->
            <div class="col-sm-3 col-md-3">

<!-- Full Page Layout -->
<div class="d-flex flex-column align-items-left" style="height: 80vh; justify-content: space-between;">

    <!-- Top Section: Profile Picture, Name, and Logo -->
    <div class="text-center" style="margin-top: 30px;">
        <!-- Student Profile Picture -->
        <img 
            src="/" 
            alt="student dp"
            style="width: 250px; height: 250px; border-radius: 70%;"
        />
        
        <!-- Student Name -->
        <p style="font-size: 1.2rem; font-weight: bold; margin-bottom: 35px;">{{ student.name }}</p>
        
        <!-- School Logo -->
        <img 
            src="/path-to-school-logo.png" 
            alt="School Logo" 
            style="width: 250px; height: 250px; border-radius: 100%;"
        />
    </div>

    <!-- Bottom Section: Logout Button -->
    <div class="text-center" style="margin-top: 400px;">
        <a 
            href="{{ path('student_logout') }}" 
            style="padding: 10px 20px; font-size: 1.5rem;"
        >
            <span class="glyphicon glyphicon-log-out"></span> Logout
        </a>
    </div>
</div>
</div>





</div>
</div>



<script>
const duration = {{ durationInSeconds }}; // Total duration in seconds
const timerElement = document.getElementById('time-remaining');
const theoryPageUrl = "{{ theoryPageUrl }}";
const resultPageUrl = "{{ resultPageUrl }}";
const examType = "{{ examType }}"; // 'Examination' or another type
const studentId = "{{ studentId }}";  // Unique student ID (passed dynamically from backend)
const examToken = "{{ examToken }}";  // Unique exam token (passed dynamically from backend)

// Unique keys
const storageKey = `examEndTime_${studentId}_${examToken}`;
const tamperKey = `tamperFlag_${studentId}_${examToken}`;

// Utility: Set a cookie
function setCookie(name, value, expirationInSeconds) {
    const date = new Date();
    date.setTime(date.getTime() + expirationInSeconds * 1000);
    document.cookie = `${name}=${value};expires=${date.toUTCString()};path=/`;
}

// Utility: Get a cookie
function getCookie(name) {
    const cookies = document.cookie.split(';');
    for (let i = 0; i < cookies.length; i++) {
        const [key, value] = cookies[i].trim().split('=');
        if (key === name) return value;
    }
    return null;
}

// Utility: Delete a cookie
function deleteCookie(name) {
    document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;`;
}

// Handle tampering detection
function monitorLocalStorage() {
    const originalValue = localStorage.getItem(storageKey);

    setInterval(() => {
        const currentValue = localStorage.getItem(storageKey);
        if (currentValue !== originalValue) {
            persistTamperingState();
            displayTamperingWarning();
        }
    }, 1000);
}

// Persist tampering state in both localStorage and cookie
function persistTamperingState() {
    localStorage.setItem(tamperKey, 'true');
    setCookie(tamperKey, 'true', 24 * 60 * 60); // 24-hour cookie
}

// Check for tampering state on page load
function checkTamperingOnLoad() {
    const tamperedLocal = localStorage.getItem(tamperKey) === 'true';
    const tamperedCookie = getCookie(tamperKey) === 'true';

    if (tamperedLocal || tamperedCookie) {
        persistTamperingState(); // Re-sync if only one is set
        displayTamperingWarning();
    }
}

// Display tampering warning overlay
function displayTamperingWarning() {
    const overlay = document.createElement('div');
    overlay.style.position = 'fixed';
    overlay.style.top = '0';
    overlay.style.left = '0';
    overlay.style.width = '100%';
    overlay.style.height = '100%';
    overlay.style.backgroundColor = 'white';
    overlay.style.zIndex = '9999';
    overlay.style.display = 'flex';
    overlay.style.alignItems = 'center';
    overlay.style.justifyContent = 'center';

    const warningMessage = document.createElement('div');
    warningMessage.style.color = 'red';
    warningMessage.style.fontSize = '3rem';
    warningMessage.style.textAlign = 'center';
    warningMessage.innerHTML = `
        <h1> How Did You Even Get Here !</h1>
         <h2> What did You Do ??</h2>
        <h5>Warning: Timer tampering detected!</p>
        <h5>The page has been locked.</p>
    `;
    overlay.appendChild(warningMessage);

    document.body.appendChild(overlay);
}

// Start the countdown timer
function startCountdown(duration) {
    let endTime = Date.now() + duration * 1000;

    // Check if localStorage already has an endTime
    const storedData = JSON.parse(localStorage.getItem(storageKey));
    if (storedData) {
        endTime = storedData.endTime; // Use stored end time
    } else {
        const expirationTime = Date.now() + 24 * 60 * 60 * 1000; // 24 hours
        localStorage.setItem(
            storageKey,
            JSON.stringify({ endTime, expirationTime })
        );
    }

    function updateTimer() {
        const now = Date.now();
        const remainingTime = Math.max(0, Math.floor((endTime - now) / 1000));

        const hours = Math.floor(remainingTime / 3600);
        const minutes = Math.floor((remainingTime % 3600) / 60);
        const seconds = remainingTime % 60;

        timerElement.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

        if (remainingTime <= 0) {
            clearInterval(timerInterval);
            redirectToNextPage();
        }
    }

    const timerInterval = setInterval(updateTimer, 1000);
    updateTimer();
}

// Automatically clear expired localStorage keys
function clearExpiredStorage() {
    const storedData = JSON.parse(localStorage.getItem(storageKey));
    if (storedData && Date.now() > storedData.expirationTime) {
        localStorage.removeItem(storageKey);
        deleteCookie(tamperKey); // Clear tampering flag
    }
}

// Handle redirection when the timer ends
function redirectToNextPage() {
        window.location.href = theoryPageUrl;
}

// Attach the logic to run on page load
document.addEventListener("DOMContentLoaded", () => {
    clearExpiredStorage(); // Clear expired keys
    checkTamperingOnLoad(); // Check tampering state
    startCountdown(duration);
    monitorLocalStorage(); // Detect tampering
});







  // Function to request fullscreen mode
        function enterFullscreen() {
            if (document.documentElement.requestFullscreen) {
                document.documentElement.requestFullscreen();
            } else if (document.documentElement.mozRequestFullScreen) { // Firefox
                document.documentElement.mozRequestFullScreen();
            } else if (document.documentElement.webkitRequestFullscreen) { // Chrome, Safari, Opera
                document.documentElement.webkitRequestFullscreen();
            } else if (document.documentElement.msRequestFullscreen) { // IE/Edge
                document.documentElement.msRequestFullscreen();
            } else {
                console.error("Fullscreen is not supported in this browser.");
            }
        }

        // Check if fullscreen mode is active
        function isFullscreen() {
            return document.fullscreenElement || 
                document.mozFullScreenElement || 
                document.webkitFullscreenElement || 
                document.msFullscreenElement;
        }

        // Handle fullscreen button click
        document.getElementById('fullscreenButton').addEventListener('click', function () {
            enterFullscreen();
        });

        // Monitor fullscreen changes
        document.addEventListener('fullscreenchange', toggleExamAccess);
        document.addEventListener('webkitfullscreenchange', toggleExamAccess);
        document.addEventListener('mozfullscreenchange', toggleExamAccess);
        document.addEventListener('msfullscreenchange', toggleExamAccess);

        // Toggle visibility of the exam content and fullscreen warning
        function toggleExamAccess() {
            if (isFullscreen()) {
                document.getElementById('fullscreenWarning').style.display = 'none';
                document.getElementById('examContent').style.display = 'block';
            } else {
                // If fullscreen is exited, block the page again
                document.getElementById('fullscreenWarning').style.display = 'flex';
                document.getElementById('examContent').style.display = 'none';
                enterFullscreen();  // Re-enter fullscreen if the user exits it
            }
        }

        // Enforce fullscreen every few seconds
        setInterval(function () {
            if (!isFullscreen()) {
                enterFullscreen();  // Re-enter fullscreen if not in fullscreen mode
            }
        }, 2000);  // Check every 2 seconds
















let isFetchingQuestion = false;
let currentPage = 1;
let totalPages = 1;
let currentQuestionId = null;
let selectedOptions = {};
let student =  "{{ studentId }}";



$(document).on("change", ".dynamic-dropdown", function () {
    const dropdownIndex = $(this).data("dropdown-index");
    selectedOptions[dropdownIndex] = $(this).val();
});

//Question Rendering Functions

/**
 * Renders radio button options
 * @param {object} options - Radio button options
 */
function renderRadioOptions(options) {
  const optionsContainer = $("#options-container");
  Object.keys(options).forEach((key) => {
    optionsContainer.append(`
      <div>
        <input type="radio" name="option" value="${key}" id="${key}">
        <label for="${key}">${options[key]}</label>
      </div>
    `);
  });
}

/**
 * Renders checkbox options
 * @param {object} options - Checkbox options
 */
function renderCheckboxOptions(options) {
  const optionsContainer = $("#options-container");
  Object.keys(options).forEach((key) => {
    optionsContainer.append(`
      <div>
        <input type="checkbox" name="option" value="${key}" id="${key}">
        <label for="${key}">${options[key]}</label>
      </div>
    `);
  });
}

/**
 * Renders German language question option
 */
function renderGermanOption() {
  const optionsContainer = $("#options-container");
  optionsContainer.append(`
    <div>
      <label for="germanResponse">Type Answer Here: </label>
      <input type="text" id="germanResponse" name="germanResponse" placeholder="Answer here">
    </div>
  `);
}

/**
 * Renders boolean question option
 * @param {object} options - Boolean options
 */
function renderBooleanOption(options) {
  const optionsContainer = $("#options-container");
  Object.keys(options).forEach((key) => {
    optionsContainer.append(`
      <div>
        <input type="radio" name="booleanOption" value="${key}" id="${key}">
        <label for="${key}">${options[key]}</label>
      </div>
    `);
  });
}

/**
 * Renders image question option
 * @param {object} options - Image options
 */
function renderImageOption(options) {
  const optionsContainer = $("#options-container");
  optionsContainer.append(`
    <div>
      <img src="${options.imagePath}" alt="Question Image" style="max-width: 80%; max-height: 200px; margin-bottom: 5px;">
      <div>
        <label for="imageResponse">Type Answer Here:</label>
        <input type="text" id="imageResponse" name="imageResponse" placeholder="Answer here">
      </div>
    </div>
  `);
}


//Question Fetching and Rendering

/**
 * Fetches a question and renders it
 * @param {number} page - Page number
 */
function fetchQuestion(page) {
  return new Promise((resolve, reject) => {
    if (isFetchingQuestion) {
      reject();
      return;
    }
    isFetchingQuestion = true;
    $.ajax({
      url: `/student/${examToken}/questions`,
      type: "GET",
      data: { page: page },
      dataType: "json",
      beforeSend: function () {
        $("#spinner").show();
        $("#error-message").hide();
        $("#question-text").hide();
        $("#options-container").empty();
        $("#student-response").empty();
      },
      success: function (response) {
        $("#spinner").hide();
        $("#question-text").show();
        if (response.error) {
          $("#error-message").text(response.error).show();
          isFetchingQuestion = false;
          reject();
          return;
        }
        // Update question and options
        $("#question-text").html(renderQuestionWithDropdowns(response.question, response.questionId));
        renderQuestionOptions(response);
        // Store the current question ID
        currentQuestionId = response.questionId;
        // Update pagination state
        currentPage = response.currentPage;
        totalPages = response.totalPages;
        // Update the pagination controls
        updatePaginationControls();
        // Check for a saved response
        const savedResponse = getStudentResponse(examToken, currentQuestionId);
        if (savedResponse) {
          // Display the saved response
          $("#student-response").text("Your previous answer: " + savedResponse);
        }
        isFetchingQuestion = false;
        resolve();
      },
      error: function (xhr, status, error) {
        $("#spinner").hide();
        $("#error-message").text("An error occurred while fetching the question. Please try again.").show();
        isFetchingQuestion = false;
        reject();
      },
    });
    // Check for a saved response
const userResponseKey = `userResponse-${student}-${examToken}-${currentQuestionId}`;
const savedResponse = localStorage.getItem(userResponseKey);
if (savedResponse) {
  // Display the saved response
  const userResponse = JSON.parse(savedResponse);
  $("#student-response").text("Your previous answer: " + userResponse.selectedAnswer);
}
  });
}



//Student Response Handling

/**
 * Gets the student's response
 * @returns {string} Student's response
 */

function getStudentResponse() {
    const response = [];

    // Get values from checkboxes, radio buttons, and inputs
    $("#options-container select, input").each(function () {
        const inputType = $(this).attr("type");
        const value = $(this).val();
        if (inputType === "checkbox" || inputType === "radio") {
            if ($(this).is(":checked")) response.push(value);
        } else if ($(this).is("select")) {
            const selectedValue = $(this).find(":selected").val();
            if (selectedValue) response.push(selectedValue);
        } else {
            if (value) response.push(value);
        }
    });

    // Explicitly collect dropdown values
    $(".dynamic-dropdown").each(function () {
        const selectedValue = $(this).val();
        if (selectedValue) response.push(selectedValue);
    });

    return response.join(", ");
}


/**
 * Stores the student's response
 * @param {string} response - Student's response
 */
function storeStudentResponse(response) {
  // Store the response in local storage or a database
  localStorage.setItem(`response-${currentQuestionId}`, response);
}

/**
 * Retrieves the student's response
 * @param {number} questionId - Question ID
 * @returns {string} Student's response
 */
function getStoredStudentResponse(questionId) {
  // Retrieve the response from local storage or a database
  return localStorage.getItem(`response-${questionId}`);
}


//Pagination Controls

/**
 * Updates the pagination controls
 */
function updatePaginationControls() {
  console.log("Updating pagination controls...");
  console.log("Current page:", currentPage);
  console.log("Total pages:", totalPages);

  const prevButton = $("#prev-button");
  const nextButton = $("#next-button");
  const submitButton = $("#submit-button");
  const paginationInfo = $("#page-info");

  // Enable/Disable Previous button
  prevButton.prop("disabled", currentPage <= 1);

  // Update "Page X of Y" text
  paginationInfo.text(`Page ${currentPage} of ${totalPages}`);

  // Show or hide Next/Submit button
  if (currentPage < totalPages) {
    nextButton.show();
    submitButton.hide();
  } else {
    nextButton.hide();
    submitButton.show();
  }

  // Update page numbers dynamically
  const pageNumbersDiv = $(".page-numbers");
  pageNumbersDiv.empty();

  for (let i = 1; i <= totalPages; i++) {
    const pageButton = $("<span>")
      .addClass("page-item")
      .text(i)
      .attr("data-page", i)
      .css({
        padding: "10px 15px",
        borderRadius: i === currentPage ? "50%" : "10px",
        backgroundColor: i === currentPage ? "#0056b3" : "#e0e0e0",
        color: i === currentPage ? "white" : "black",
        margin: "5px",
        cursor: "pointer",
      });

    // Add event listener to page button
    pageButton.on("click", function () {
      fetchQuestion(i);
    });

    // Add animation classes
    if (i < currentPage) {
      pageButton.addClass("animate-out");
    } else if (i === currentPage) {
      pageButton.addClass("animate-in");
    } else {
      pageButton.addClass("animate-in-right");
    }

    pageNumbersDiv.append(pageButton);
  }

  // Add animation to page numbers
  $(".animate-out").animate({ opacity: 0, marginLeft: "-50px" }, 500, function () {
    $(this).remove();
  });

  $(".animate-in").animate({ opacity: 1, marginLeft: "0px" }, 500);

  $(".animate-in-right").animate({ opacity: 1, marginRight: "0px" }, 500);
}


//Answered Question Handling

/**
 * Stores the answered question
 * @param {number} questionId - Question ID
 * @param {string} response - Student's response
 */
function storeAnsweredQuestion(questionId, response) {
  // Store the answered question in local storage or a database
  localStorage.setItem(`answered-question-${questionId}`, response);
}

/**
 * Retrieves the answered question
 * @param {number} questionId - Question ID
 * @returns {string} Student's response
 */
function getAnsweredQuestion(questionId) {
  // Retrieve the answered question from local storage or a database
  return localStorage.getItem(`answered-question-${questionId}`);
}

/**
 * Decorates the page number for an answered question
 * @param {number} questionId - Question ID
 */
function decorateAnsweredQuestionPageNumber(questionId) {
  // Get the page number element
  const pageNumberElement = $(`#page-number-${questionId}`);

  // Add a class to indicate that the question has been answered
  pageNumberElement.addClass("answered-question");

  // Store the answered question
  const response = getStudentResponse();
  storeAnsweredQuestion(questionId, response);
}


//Pagination Control Event Handlers

/**
 * Handles the click event for the previous button
 */
function handlePreviousButtonClick() {
  // Decrement the current page
  currentPage--;

  // Fetch the previous question
  fetchQuestion(currentPage);
}

/**
 * Handles the click event for the next button
 */
function handleNextButtonClick() {
  // Increment the current page
  currentPage++;

  // Fetch the next question
  fetchQuestion(currentPage);
}

/**
 * Handles the click event for the submit button
 */
function handleSubmitButtonClick() {
  // Get the student's response
  const response = getStudentResponse();

  // Store the response
  storeStudentResponse(response);

  // Fetch the next question
  fetchQuestion(currentPage + 1);
}


//Page Number Event Handlers

/**
 * Handles the click event for a page number
 * @param {number} questionId - Question ID
 */
function handlePageNumberClick(questionId) {
  // Fetch the question
  fetchQuestion(questionId);
}


// Question Rendering
/**
 * Renders a question
 * @param {object} question - Question object
 * @param {number} questionId - Question ID
 * @returns {string} Rendered question HTML
 */
function renderQuestionWithDropdowns(question, questionId) {
  // Render the question text
  const questionText = renderQuestionText(question);
  
  // Render the dropdowns
  const dropdownsHtml = renderDropdowns(question);
  
  // Combine the question text and dropdowns HTML
  return `${questionText}${dropdownsHtml}`;
}

/** 
 * Renders the question with dropdowns 
 * @param {object} question - Question object 
 * @returns {string} Rendered question HTML 
 */
function renderQuestionWithDropdowns(question) {
  const questionTextHtml = renderQuestionText(question);
  return questionTextHtml;
}


/**
 * Renders the question text
 * @param {object} question - Question object
 * @returns {string} Rendered question text HTML
 */
function renderQuestionText(question) {
  const dropdownPlaceholders = question.match(/\[(.*?)\]/g);
  if (dropdownPlaceholders) {
    dropdownPlaceholders.forEach((placeholder) => {
      const options = placeholder.replace('[', '').replace(']', '').split('/');
      const dropdownHtml = renderDropdown(options);
      question = question.replace(placeholder, dropdownHtml);
    });
  }
  return `<p>${question}</p>`;
}


/**
 * Renders a dropdown
 * @param {array} options - Array of options
 * @returns {string} Rendered dropdown HTML
 */
function renderDropdown(options) {
  return `<select class="dropdown-options">${options.map((option) => {
    return `<option value="${option}">${option}</option>`;
  }).join("")}</select>`;
}



//Dropdown Event Handlers

/**
 * Handles the change event for a dropdown
 * @param {number} questionId - Question ID
 * @param {number} dropdownId - Dropdown ID
 */
// Store selected dropdown values in an object
let selectedDropdownValues = {};

// Handles dropdown change
function handleDropdownChange(questionId, dropdownId, selectedValue) {
  // Store the selected value
  if (!selectedDropdownValues[questionId]) {
    selectedDropdownValues[questionId] = {};
  }
  selectedDropdownValues[questionId][dropdownId] = selectedValue;

  // Update and store the student response
  updateStudentResponse();
  storeStudentResponse(getStudentResponse());
}

//Pagination Control Initialization

/**
 * Initializes the pagination controls
 */
function initPaginationControls() {
  // Initialize the pagination controls
  $("#prev-button").on("click", handlePreviousButtonClick);
  $("#next-button").on("click", handleNextButtonClick);
  $("#submit-button").on("click", handleSubmitButtonClick);
}


//Page Number Initialization

/**
 * Initializes the page numbers
 */
function initPageNumbers() {
  // Initialize the page numbers
  $(".page-number").on("click", function () {
    const questionId = $(this).data("question-id");
    handlePageNumberClick(questionId);
  });
}




//Question Options Rendering

/**
 * Renders the question options
 * @param {object} response - Question response object
 */
function renderQuestionOptions(response) {
  // Render the question options
  const optionsContainer = $("#options-container");
  optionsContainer.empty();

  switch (response.options.type) {
    case "RadioOption":
      renderRadioOptions(response.options.options);
      break;
    case "CheckboxOption":
      renderCheckboxOptions(response.options.options);
      break;
    case "GermanOption":
      renderGermanOption();
      break;
    case "BooleanOption":
      renderBooleanOption(response.options.options);
      break;
    case "DropdownOption":
    case "RegisterOption":
      renderDropdownsInQuestion();
      break;
    case "ImagesOption":
      renderImageOption(response.options.options);
      break;
    default:
      optionsContainer.html("<p>No valid options available.</p>");
  }
}


//Dropdowns in Question Rendering

/**
 * Renders the dropdowns in the question
 */
// Update updateStudentResponse function
function updateStudentResponse() {
  const studentResponse = getStudentResponse();
  $("#student-response").text("Your Selected Answer is : " + studentResponse);
}

//Dropdowns in Question Rendering
/** * Renders the dropdowns in the question */
// Store selected dropdown values in an object

// Update renderDropdownsInQuestion function
function renderDropdownsInQuestion() {
  $(document).on("change", "#question-text .dynamic-dropdown", function() {
    const selectedOption = $(this).val();
    const dropdownIndex = $(this).data("dropdown-index");

    if (typeof currentQuestionId === "undefined") {
      console.error("currentQuestionId is not set!");
      return;
    }

    // Handle dropdown selection change
    handleDropdownChange(currentQuestionId, dropdownIndex, selectedOption);
  });
}




//Image Option Rendering

/**
 * Renders the image option
 * @param {object} options - Image option object
 */
function renderImageOption(options) {
  // Render the image option
  const optionsContainer = $("#options-container");
  optionsContainer.append(`
    <div>
      <img src="${options.imagePath}" alt="Question Image" style="max-width: 80%; max-height: 150px; margin-bottom: 5px;">
      <div>
        <label for="imageResponse">Type Answer Here:</label>
        <input type="text" id="imageResponse" name="imageResponse" placeholder="Answer here">
      </div>
    </div>
  `);
}



// Button Event Handlers

/** * Handles the click event for the previous button */
function handlePreviousButtonClick() {
const selectedAnswer = getStudentResponse();
saveStudentResponse(student, currentPage, currentQuestionId, examToken, selectedAnswer);
if (currentPage > 1) {
currentPage--;
fetchQuestion(currentPage).then(() => {
selectedOptions = []; // Clear the selectedOptions array only after the previous question is fetched
});
}
}

/** * Handles the click event for the next button */
function handleNextButtonClick() {
const selectedAnswer = getStudentResponse();
saveStudentResponse(student, currentPage, currentQuestionId, examToken, selectedAnswer);
if (currentPage < totalPages) {
currentPage++;
fetchQuestion(currentPage).then(() => {
selectedOptions = []; // Clear the selectedOptions array only after the next question is fetched
});
}
}

/** * Handles the click event for the submit button */
function handleSubmitButtonClick() {
const selectedAnswer = getStudentResponse();
saveStudentResponse(student, currentPage, currentQuestionId, examToken, selectedAnswer, function () {
selectedOptions = []; // Clear the selectedOptions array only after the response is saved
const url = theoryPageUrl;
window.location.href = url;
});
}

/** * Handles the click event for the page numbers */
function handlePageNumberClick(page) {
const selectedAnswer = getStudentResponse();
saveStudentResponse(student, currentPage, currentQuestionId, examToken, selectedAnswer);
if (page !== currentPage) {
fetchQuestion(page).then(() => {
selectedOptions = []; // Clear the selectedOptions array only after the new question is fetched
});
}
}


//Button Initialization

/**
 * Initializes the button event handlers
 */
function initButtonEventHandlers() {
  $("#prev-button").on("click", handlePreviousButtonClick);
  $("#next-button").on("click", handleNextButtonClick);
  $("#submit-button").on("click", handleSubmitButtonClick);
  $(".page-numbers").on("click", ".page-item", function () {
    const page = $(this).data("page");
    handlePageNumberClick(page);
  });
}



//Error Handling

/**
 * Handles errors
 * @param {object} error - Error object
 */
function handleError(error) {
  // Handle the error
  console.error(error);
  $("#error-message").text("An error occurred. Please click the page number to reload.").show();
}


//Initialization

/**
 * Initializes the application
 */
function init() {
  // Initialize the application
  initPaginationControls();
  initPageNumbers();
  fetchQuestion(1);
}

// Initialize the application
init();




//Save Student Response

/**
 * Saves the student's response
 * @param {number} currentPage - Current page number
 * @param {number} currentQuestionId - Current question ID
 * @param {string} examToken - Exam token
 * @param {string} selectedAnswer - Selected answer
 * @param {function} callback - Callback function
 */

// Function to save response dynamically
function saveStudentResponse(student, currentPage, currentQuestionId, examToken, selectedAnswer, callback) {


  // Skip submission if no answer is selected
  if (selectedAnswer === null || selectedAnswer === undefined || selectedAnswer === "" || (Array.isArray(selectedAnswer) && selectedAnswer.length === 0)) {
    console.log("No answer selected, skipping submission.");
    return; // Exit the function without making the AJAX call
  }

  // Ensure selectedAnswer is formatted correctly (e.g., JSON string for arrays)
  if (Array.isArray(selectedAnswer)) {
    selectedAnswer = JSON.stringify(selectedAnswer);
  }

  // Save response in LocalStorage
  let userResponseKey = `userResponse-${student}-${examToken}-${currentQuestionId}`;
  let userResponse = {
    currentPage: currentPage,
    selectedAnswer: selectedAnswer
  };
  localStorage.setItem(userResponseKey, JSON.stringify(userResponse));

  // Submit response via AJAX
  $.ajax({
    url: `/student/save-response`,
    method: "POST",
    data: {
      questionId: currentQuestionId,
      examId: examToken,
      answer: selectedAnswer,
    },
    success: function (response) {
      if (response.success) {
        console.log("Response saved successfully:", response.message);
        if (callback) {
          console.log("Calling callback function...");
          callback();
        }
      } else {
        console.error("Error saving response:", response.message);
      }
    },
    error: function (xhr, status, error) {
      console.error("Error saving response:", error);
      alert("An error occurred while saving your response. Please try again.");
    },
  });
}


</script>
 <style>

 
.title{
    font-size:20px;
    font-weight:bold;
    margin-top:50px;
    text-align:center;
}

.timecount{
    font-size:50px;
    margin-top:-10px;
}



.pagination-container {
    text-align: center;
    margin-top: 20px;
}

.page-numbers-wrapper {
    overflow-x: hidden;
    white-space: nowrap;
    border: 1px solid #ccc;
    border-radius: 40px;
    padding: 10px;
    margin: 20px auto;
    max-width: 80%;
}

.page-numbers {
    display: inline-flex;
    justify-content: center;
    align-items: center;
}

.page-numbers .page-item {
    display: inline-block;
    min-width: 40px;
    text-align: center;
    font-size: 14px;
}

.pagination-controls {
    margin-top: 10px;
}

#prev-button,
#next-button {
    margin: 0 15px;
}

#page-info {
    font-size: 16px;
}



/* Basic styling for question container */
.question-containeq {
    background-color: white;
    padding: 15px;
    margin-bottom: 20px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    text-align: left;
}

/* Styling for question text */
.question-text {
    font-size: 14px;
    font-weight: bold;
}

/* Basic styling for options container */
.options-container {
    background-color: white;
    padding: 15px;
    margin-bottom: 20px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    text-align: left;
}

/* Styling for the individual option items */
.options-container div {
    margin-bottom: 10px;
}

/* Styling for the response container */
.response-container {
    background-color: white;
    padding: 15px;
    margin-top: 20px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    text-align: left;
    font-style: italic;
}

/* Styling for option labels */
label {
    margin-left: 10px;
}

#germanResponse{
    width:300px;
    height:40px;
}


</style>

{% endblock %}
