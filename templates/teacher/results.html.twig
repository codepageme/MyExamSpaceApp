{% extends 'tdashbase.html.twig' %}

{% block title %}Teacher Result - MyExamSpace.Com{% endblock %}
{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('Css/dashboard.css') }}">
   <style>
        body {
            max-width: 100vw;
            overflow-x: hidden;
        }
        .container {
            max-width: 100vw;
            margin: 0 auto;
            box-sizing: border-box;
        }
        .button-container {
            display: flex;
            justify-content: flex-start;
            gap: 10px;
            margin-bottom: 20px;
            margin-top: 10px;
        }
        .filters-container {
            display: flex;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
            margin-bottom: 15px;
        }
        .filters-container input, 
        .filters-container select {
            width: 200px; /* Make all filter elements uniform */
        }
        .table-container {
            max-width: 100%;
            max-height: 500px;
            overflow-x: auto;
            overflow-y: auto;
            border: 1px solid #ccc;
        }
        table {
            width: auto;
            min-width: 1700px;
            border-collapse: collapse;
            white-space: nowrap;
        }
        th, td {
            padding: 5px;
            text-align: center;
            border: 1px solid #ddd;
            font-size: 14px;
        }
        button.process-btn {
            font-size: 12px;
            width:70px;
            padding: 5px;
        }
        button.reset-btn {
            font-size: 12px;
             width:70px;
            padding: 5px;
        }

        .highlight-success {
    background-color: #d4edda; /* Light green */
    transition: background-color 0.5s ease-in-out;
}

#success-toast {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: #28a745;
    color: white;
    padding: 10px 20px;
    border-radius: 5px;
    display: none;
    font-size: 14px;
}

    </style>
{% endblock %}

{% block map_content %}
    <div class="here"></div>
    <ul>
        <li class="boton"><span class="glyphicon glyphicon-th-large glypha"></span>
            <br><a href="{{ path('teacher_dashboard') }}">Dashboard</a></li>
        <li class="boton"><span class="glyphicon glyphicon-book glypha"></span>
            <br><a href="{{ path('teacher_preview_question') }}">Exam</a></li>
        <li class="boton activa"><span class="glyphicon glyphicon-list-alt glyph"></span>
            <br><a href="{{ path('teacher_results') }}">Results</a></li>
        <li class="boton"><span class="glyphicon glyphicon-phone glypha"></span>
            <br><a href="#">Data</a></li>
        <li class="boton"><span class="glyphicon glyphicon-user glypha"></span>
            <br><a href="{{ path('teacher_account') }}">My Account</a></li>
    </ul>
    <a href="{{ path('teacher_logout') }}" id="logout" 
       onclick="event.preventDefault(); document.getElementById('logout-form').submit();">
        <span class="glyphicon glyphicon-log-out glypha"></span> Logout
    </a>

    <form id="logout-form" action="{{ path('teacher_logout') }}" method="POST" style="display: none;">
        <input type="hidden" name="_csrf_token" value="{{ csrf_token('logout') }}">
    </form>
{% endblock %}

{% block content %}
<div class="container">
    <div class="button-container">
        <a href="{{ path('teacher_results') }}" class="btn btn-primary">
            <span class="glyphicon glyphicon-floppy-save"></span> Edit Result
        </a>
        <a   href="{{ path('view_results') }}" class="btn btn-default">
            <span class="glyphicon glyphicon-floppy-saved"></span> View Result
        </a>
    </div>

    <!-- üîπ Filters (Dropdowns) -->
    <div class="filters-container">
        <input type="hidden" id="sessionIdInput" value="{{ latestSession.id }}">
        <input type="text" value="{{ latestSession.name }}" class="form-control" disabled>

        <select name="term" id="termDropdown" class="form-control">
            {% for term in terms %}
                <option value="{{ term.id }}" {% if term.id == selectedTerm.id %}selected{% endif %}>
                    {{ term.name }}
                </option>
            {% endfor %}
        </select>

          <select name="subject" id="subjectDropdown" class="form-control">
            <option value="">Select Subject</option>
            {% for teacherSubject in teacherSubjects %}
                <option value="{{ teacherSubject.id }}" data-subjectt-id="{{ teacherSubject.subject.id }}">
                    {{ teacherSubject.subject.course }}
                </option>
            {% endfor %}
        </select>

        <select name="classroom" id="classroomDropdown" class="form-control" disabled>
            <option value="">Select Classroom</option>
        </select>
    </div>

    <!-- üîπ Results Table -->
    <div class="table-container">
        <table class="table table-bordered table-hover">
            <thead id="examTypesHeader">
                <tr>
                    <th>Awaiting Data Query</th>
                </tr>
            </thead>
            <tbody id="resultsBody">
                <tr>
                    <td colspan="8" class="text-center text-muted">No data available.</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function () {
    let termDropdown = document.getElementById("termDropdown");
    let subjectDropdown = document.getElementById("subjectDropdown");
    let classroomDropdown = document.getElementById("classroomDropdown");

    // üéØ Store the selected subject ID globally
    subjectDropdown.addEventListener("change", function () {
        let selectedOption = this.options[this.selectedIndex];

        if (!selectedOption) {
            console.error("‚ùå Error: No subject selected!");
            return;
        }

        let teacherSubjectId = selectedOption.value;
        let subjecttId = selectedOption.getAttribute("data-subjectt-id");

        if (!subjecttId) {
            console.error("‚ùå Error: subjecttId is missing!", selectedOption);
        } else {
            console.log("‚úÖ Selected subjecttId:", subjecttId);
        }

        // Store globally
        window.selectedTeacherSubjectId = teacherSubjectId;
        window.selectedSubjecttId = subjecttId ? parseInt(subjecttId, 10) : null;
    });

    termDropdown.addEventListener("change", updateResults);
    subjectDropdown.addEventListener("change", fetchClassrooms);
    classroomDropdown.addEventListener("change", updateResults);

    function fetchClassrooms() {
        let teacherSubjectId = this.value;
        let subjecttId = window.selectedSubjecttId; // Use globally stored value

        classroomDropdown.innerHTML = '<option value="">Loading...</option>';
        classroomDropdown.disabled = true;

        if (teacherSubjectId) {
            fetch(`/get-classrooms/${teacherSubjectId}`)
                .then(response => response.json())
                .then(data => {
                    classroomDropdown.innerHTML = '<option value="">Select Classroom</option>';
                    data.forEach(classroom => {
                        let option = document.createElement("option");
                        option.value = classroom.id;
                        option.textContent = classroom.name;
                        classroomDropdown.appendChild(option);
                    });
                    classroomDropdown.disabled = false;
                })
                .catch(error => console.error("‚ö†Ô∏è Error fetching classrooms:", error));
        }
    }

    function updateResults() {
        let classroomId = classroomDropdown.value;
        let subjecttId = window.selectedSubjecttId; // Use stored subject ID
        let termId = termDropdown.value;
        let sessionId = document.getElementById("sessionIdInput").value;

        console.log("üîç Fetching results for:", {
            classroomId,
            subjecttId,
            termId,
            sessionId,
        });

        if (classroomId && subjecttId) {
          fetch(`/get-results/${subjecttId}/${classroomId}/${sessionId}/${termId}`)
                .then(response => response.json())
                .then(data => {
                    console.log("‚úÖ Received Data:", data); // üîπ Add this to check API response

                    let resultsBody = document.getElementById("resultsBody");
                    let examTypesHeader = document.getElementById("examTypesHeader");

                    resultsBody.innerHTML = "";
                    examTypesHeader.innerHTML = "";

                    if (data.students.length === 0) {
                        resultsBody.innerHTML = '<tr><td colspan="8" class="text-center text-muted">No students found.</td></tr>';
                        return;
                    }

                    let examTypes = data.exam_types;

                    let headerRow1 = "<tr><th>Student Name</th>";
                    let headerRow2 = "<tr><th></th>";

                    examTypes.forEach(type => {
                        headerRow1 += `<th>${type.name}</th>`;
                        headerRow2 += `<th><input type="text" class="form-control text-center" disabled value="Score"></th>`;
                    });

                    headerRow1 += "<th>Total</th><th>Action</th></tr>";
                    headerRow2 += "<th><input type='text' class='form-control text-center' disabled value='Auto'></th><th></th></tr>";

                    examTypesHeader.innerHTML = headerRow1 + headerRow2;

                                data.students.forEach(student => {
                let row = `<tr class="student-row" data-student-id="${student.student_id}"> 
                            <td>${student.student_name}</td>`;

                let totalScore = 0;

                examTypes.forEach(type => {
                        let scoreObj = student.scores[type.id];  // Get the object
                        let score = scoreObj ? parseFloat(scoreObj.score) : 0.00; // Extract score safely
                        totalScore += score;
                        
                        row += `<td>
                                    <input type="number" class="exam-score" 
                                        data-exam-type-id="${type.id}" 
                                        value="${score.toFixed(2)}" min="0" max="100">
                                </td>`;
                    });

                row += `<td><input type="text" class="form-control text-center total-score" disabled value="${totalScore.toFixed(2)}"></td>`;
                row += `<td>
                            <button class="btn btn-success process-btn">Process</button>
                            <button class="btn btn-warning reset-btn">Reset</button>
                        </td></tr>`;

                resultsBody.innerHTML += row;
            });

                    attachListeners();
                })
                .catch(error => console.error("‚ö†Ô∏è Error fetching student results:", error));
        }
    }

   function attachListeners() {
    document.querySelectorAll(".exam-score").forEach(input => {
        input.addEventListener("input", function () {
            let row = this.closest("tr");
            let studentId = row.dataset.studentId;
            let subjecttId = window.selectedSubjecttId; // Use stored subject ID
            let termId = document.getElementById("termDropdown").value;
            let sessionId = document.getElementById("sessionIdInput").value;
            let examTypeId = this.dataset.examTypeId;
            let score = parseFloat(this.value) || 0.00;

            updateTotal(row);

            fetch("/teacher/update-score", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    studentId: studentId,
                    subjecttId: subjecttId,
                    termId: termId,
                    sessionId: sessionId,
                    examTypeId: examTypeId,
                    score: score,
                }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    console.error("‚ùå Error updating score:", data.error);
                } else {
                    console.log("‚úÖ Score updated successfully!");
                    showSuccessMessage(`Score updated for ${row.children[0].textContent}`);
                    input.classList.add("highlight-success"); // Add highlight effect

                    setTimeout(() => {
                        input.classList.remove("highlight-success");
                    }, 2000);
                }
            })
            .catch(error => console.error("‚ö†Ô∏è Error:", error));
        });
    });
}

function showSuccessMessage(message) {
    let toast = document.getElementById("success-toast");
    toast.textContent = message;
    toast.style.display = "block";

    setTimeout(() => {
        toast.style.display = "none";
    }, 2000);
}


    function updateTotal(row) {
        let totalScoreCell = row.querySelector(".total-score");
        let totalScore = 0;

        row.querySelectorAll(".exam-score").forEach(input => {
            totalScore += parseFloat(input.value) || 0.00;
        });

        totalScoreCell.value = totalScore.toFixed(2);
    }
});



</script>

{% endblock %}